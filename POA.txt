Plan of Action
Project Setup

Install dependencies: Gym-PyBullet-Drones, PyBullet, NumPy, Matplotlib, etc.
Set up a version-controlled repository (e.g., GitHub) to manage code and documentation.
Environment Setup

Define the simulation environment in Gym-PyBullet-Drones.
Model static building layouts with obstacles like walls and furniture using convex shapes.
Set up randomized environments for testing robustness.
Drone Modeling

Utilize the existing quadrotor model from Gym-PyBullet-Drones.
Ensure dynamics and kinematics are consistent with the motion equations described.
Motion Planning Implementation

Implement or integrate the A*, RRT*, and motion primitives algorithms.
Add functions to generate paths in a known static environment.
Incorporate safety buffers around obstacles during path planning.
Control System Integration

Use PID and LQR controllers for trajectory tracking:
PID for smoothed waypoint following (A*).
LQR for real-time trajectory tracking (RRT*, Motion Primitives).
Simulation and Validation

Simulate drone motion in the environment for each algorithm.
Record metrics:
Path length.
Solving time.
Obstacle clearance.
Use PyBulletâ€™s visualization tools to validate motion.
Performance Analysis

Compare algorithms based on metrics.
Develop plots and quantitative insights.
Documentation and Submission

Prepare the report using the IEEE conference template.
Ensure the codebase is clean, modular, and well-documented with a clear README.


Implementation Steps
Initialize the Repository

Clone the Gym-PyBullet-Drones repository and create a virtual environment.
Model the Quadrotor

Adapt the default quadrotor model for your application, if necessary.
Design the Environment

Programmatically create environments with varying obstacle configurations.
Use convex shapes to simplify collision detection.
Implement Motion Planners

Begin with A* to establish the baseline.
Add RRT* for dynamic trajectory adjustments.
Develop or use a library for motion primitives.
Integrate Controllers

Test each controller with corresponding motion planners.
Tune parameters for optimal performance.
Run Simulations

Create scripts to automate testing across environments and record metrics.
Analyze Results

Use visualization tools and Jupyter notebooks to interpret simulation data.
Finalize Deliverables

Assemble the final report, presentation, and code for submission.
